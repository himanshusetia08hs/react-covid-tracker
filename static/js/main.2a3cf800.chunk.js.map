{"version":3,"sources":["components/Header.js","components/Footer.js","components/Datatable.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","className","Brand","href","width","src","alt","Component","Footer","Card","border","text","style","margin","target","color","App","useState","latest","setLatest","india","setIndia","results","setResults","searchStates","setSearchStates","loading","setLoading","districts","setDistricts","useEffect","axios","all","get","then","responseArr","data","statewise","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","states","filter","item","state","toLowerCase","includes","map","i","CardDeck","Body","Title","cases","todayCases","Badge","pill","deaths","recovered","moment","calendar","Form","Group","controlId","Control","type","placeholder","onChange","e","value","layout","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2a3cf800.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\n// import { FcMindMap } from \"react-icons/fc\";\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"black\" variant=\"dark\" className=\"text-center\">\n                    <Navbar.Brand href=\"#home\">\n                        <img width=\"28ch\" src=\"logomain.png\" alt=\"this is logo\" />{'   '}\n                        INDIA: COVID-19 Tracker (Anuprgyanam *)\n                    </Navbar.Brand>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react'\r\n\r\n// react-strap\r\nimport Card from 'react-bootstrap/Card'\r\n\r\n// readct-icons\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card border=\"dark\" bg=\"secondary\" text=\"light\" className=\"text-center\" style={{ margin: \"8px\" }}>\r\n                    <Card.Header><b><FcApproval />Developed by: </b><a target=\"_blank\" style={{ color: \"white\" }} href=\"home\">Himanshu Setia</a></Card.Header>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Badge from 'react-bootstrap/Badge'\n\nclass Datatable extends Component {\n\n    render() {\n\n        // destructuring of props as they are implemented using hooks\n        const { state, districts } = this.props;\n\n        // console.log(\"Props\",this.props);\n        // console.log(\"Hello\",state,districts.data[state]);\n\n        return (\n            \n            <Table striped bordered hover size=\"sm\" responsive style={{ margin: \"0px\",padding:\"0px\" }}>\n                <font size=\"2\"  >\n                    <thead>\n\n                        <tr style={{background:\"light\"}}>\n                            <th>District</th>\n                            <th>Active</th>\n                            <th>Confirmed</th>\n                            <th>Recovered</th>\n                            <th>Deaths</th>\n                        </tr>\n                        \n                        {/* javascript block code to be evaluated in JSX */}\n                        {\n                            Object.keys( districts.data[state].districtData ).map( (value) => {\n                                \n                                if((value=== \"Unknown\")||(value === \"unknown\"))\n                                    return null;\n                                    \n                                // console.log(districts.data[state].districtData[value]);\n                                // console.log(value);  // it contains districts\n                                return (\n                                    <tr>\n                                        <td>{value}</td>\n                                        <td>{districts.data[state].districtData[value].active}</td>\n                                        <td>\n                                            {\n                                                // for confirmend delta variant\n                                                districts.data[state].districtData[value].delta.confirmed !== 0 ? \n                                                <Badge pill variant=\"danger\"><small><i className=\"fas fa-arrow-up\"/></small>{ districts.data[state].districtData[value].delta.confirmed}</Badge> \n                                                : <></> \n                                            }\n                                            {districts.data[state].districtData[value].confirmed}\n                                        </td>\n                                        <td>\n                                            {/* {console.log(typeof(districts.data[state].districtData[value].delta.recovered))} */}\n                                            {\n                                                // for recovered delta variant\n                                                districts.data[state].districtData[value].delta.recovered !== 0 ? \n                                                <Badge pill variant=\"success\"><small><i className=\"fas fa-arrow-up\"/></small>{ districts.data[state].districtData[value].delta.recovered}</Badge> \n                                                : <></> \n                                            }\n                                            {districts.data[state].districtData[value].recovered}\n                                        </td>\n                                        <td>\n                                            {\n                                                // for deceased delta variant\n                                                districts.data[state].districtData[value].delta.deceased !== 0 ? \n                                                <Badge pill variant=\"warning\"><small><i className=\"fas fa-arrow-up\"/></small>{ districts.data[state].districtData[value].delta.deceased}</Badge>\n                                                : <></> \n                                            }\n                                            {districts.data[state].districtData[value].deceased}\n                                        </td> \n\n                                    </tr>\n                                )\n                            })\n                            \n                        }\n\n                    </thead>\n                </font>  \n            </Table>\n        )\n    }\n}\n\nexport default Datatable\n\n\n","// use of hooks and react keywords\nimport React, { useEffect, useState } from 'react';\n\n// bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// react-strap\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Form from 'react-bootstrap/Form'\nimport Badge from 'react-bootstrap/Badge'\nimport Accordion from 'react-bootstrap/Accordion'\n\n// readct-icons\nimport { FcGlobe } from \"react-icons/fc\";\n\n// HTTP library, API \nimport axios from \"axios\";\n\n// components\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Datatable from './components/Datatable';\n\n// utilities\nimport moment from 'moment';\nimport Columns from 'react-columns'\nimport { CircleArrow as ScrollUpButton } from \"react-scroll-up-button\";\n\n\n// functional component\nfunction App() {\n\n  // hooks and destructuring of array\n  const [latest, setLatest] = useState([])\n  const [india, setIndia] = useState([])\n  const [results, setResults] = useState([])\n  const [searchStates, setSearchStates] = useState(\"\")\n  const [loading, setLoading] = useState(true)\n  const [districts, setDistricts] = useState()\n\n  // call to get data from disease.sh\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://disease.sh/v2/all\"),\n        axios.get(\"https://api.covid19india.org/data.json\"),\n        axios.get(\"https://disease.sh/v2/countries/india\"),\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\")\n      ])\n      // assigning data in arrays after call to an API's\n      .then(responseArr => {\n        setLatest(responseArr[0].data)\n        setResults(responseArr[1].data.statewise)\n        setIndia(responseArr[2].data)\n        setLoading(false)\n        setDistricts(responseArr[3]);\n      })\n      .catch(err => {\n        console.log(\"There is error in fetching data\");\n      });\n  }, []);\n\n  // preloader\n  if (loading) {\n    return loading;\n  }\n\n  // method for obtaining current date in IST \n  const date = new Date(parseInt(latest.updated))\n  const lastUpdated = date.toString();\n\n  // search method \n  const filterStates = results.filter(item => {\n    // console.log(\"in filterstate\" + item.state);\n    return searchStates !== \"\" ? item.state.toLowerCase().includes(searchStates.toLowerCase()) : item\n  })\n\n  // displaying Accordion and Datatable\n  const states = filterStates.map((data, i) => {\n    if ((data.state === \"Total\") || (data.state === \"State Unassigned\")) {\n      return null;\n    }\n    else if (districts) {\n      // console.log(districts);\n      // console.log(districts.data);\n\n      return (\n\n        // styling for each card\n        <Card border=\"secondary\" key={i} bg=\"dark\" text=\"light\" className=\"text-center\" style={{ margin: \"8px\" }} >\n\n          {/* layout and toggling of accordion */}\n          <Accordion >\n\n            <Card >\n\n              {/* toggling on accordion */}\n              <Accordion.Toggle as={Card.Header} eventKey=\"0\" >\n                <b style={{ color: \"black\" }}>{data.state}{\" \"}<img width=\"20ch\" src=\"info.png\" alt=\"info icon\" /></b>\n              </Accordion.Toggle>\n\n              <Accordion.Collapse eventKey=\"0\">\n                <Datatable state={data.state} districts={districts} />\n              </Accordion.Collapse>\n\n            </Card>\n\n          </Accordion>\n\n          {/* Data rendeering on pocket of accordion */}\n          <Card.Body>\n\n            <Card.Text><b>Active: </b>{data.active}</Card.Text>\n            <Card.Text>\n\n              {/* {\n                  data.deltaconfirmed !== 0 ? <Badge pill variant=\"primary\"><small><i className=\"fas fa-arrow-up\"/> {data.deltaconfirmed}</small></Badge> : <></>  \n                } */}\n              <b>Confirmed: </b>{data.confirmed}\n            </Card.Text>\n            <Card.Text><b>Deceased: </b>{data.deaths}</Card.Text>\n            <Card.Text><b>Recovered: </b>{data.recovered}</Card.Text>\n\n          </Card.Body>\n\n        </Card>\n\n      )\n    }\n    return null;\n  })\n\n  // layout array containing objects for positioning\n  var layout = [{\n    columns: 2,\n    query: 'min-width: 400px'\n  }, {\n    columns: 3,\n    query: 'min-width: 870px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1100px'\n  }];\n\n  // rendering method of main functional component\n  return (\n    <div>\n      \n      {/* Header component  */}\n      <Header />\n\n      {/* Displaying global and national total count: cases, deceased, recovered */}\n      <CardDeck>\n\n        {/* Cases card */}\n        <Card bg=\"warning\" text=\"white\" className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title> <FcGlobe />{' '}{latest.cases} </Card.Title>\n            <Card.Title > <b style={{ color: \"black\" }}> <img width=\"25ch\" src=\"india.png\" alt=\"indian flag icon\" /> {' '} </b>\n              {\n                india.todayCases !== 0 ? <Badge pill variant=\"danger\"><small><i className=\"fas fa-arrow-up\" />{india.todayCases}</small></Badge> : <></>\n              }\n              {india.cases}\n            </Card.Title>\n          </Card.Body>\n          <Card.Footer> <b>Cases</b> </Card.Footer>\n        </Card>\n\n        {/* Deceased card */}\n        <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title><FcGlobe />{' '}{latest.deaths}</Card.Title>\n            <Card.Title><b style={{ color: \"black\" }}><img width=\"25ch\" src=\"india.png\" alt=\"indian flag icon\" />{' '}</b>{india.deaths}</Card.Title>\n          </Card.Body>\n          <Card.Footer> <b>Deceased</b> </Card.Footer>\n        </Card>\n\n        {/* Recovered card */}\n        <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title><FcGlobe />{' '}{latest.recovered}</Card.Title>\n            <Card.Title><b style={{ color: \"black\" }}><img width=\"25ch\" src=\"india.png\" alt=\"indian flag icon\" />{' '}</b>{india.recovered}</Card.Title>\n          </Card.Body>\n          <Card.Footer> <b>Recovered</b> </Card.Footer>\n        </Card>\n\n      </CardDeck>\n\n      {/* Plotting the specific time/ moment */}\n      <small style={{ color: \"white\" }}>Last updated {moment(lastUpdated).calendar()}</small>\n\n      {/* form block for selecting the states manually */}\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\" >\n          <Form.Control type=\"text\" placeholder=\"Search a state...\" onChange={e => setSearchStates(e.target.value)} />\n          <small style={{ color: \"white\" }}>{' '}[Tap on state for district details]</small>\n        </Form.Group>\n      </Form>\n\n      {/* In-built tag used for layout of accordions (Positioning) by passing layout array */}\n      <Columns layout={layout}>{states}</Columns>\n\n      {/* Footer component */}\n      <Footer />\n      \n      {/* scroll-up button component */}\n      <ScrollUpButton />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}